name: Match Service CI & CD

on:
  push:
    branches:
      - 'dev'
      - 'main'
      - 'features/**'
  pull_request:
    branches: 'dev'
  workflow_dispatch:

jobs:
  test:
    name: Test - Units
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven
    - name: Build with Maven
      run: mvn compile test

  sonar:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Maven verify
        run: mvn -B clean verify
      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
          # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: "SonarQube Quality Gate Status"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
          
  build:
    name: Build, Publish & Docker push
    if: ${{github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'releases/release')}}
    runs-on: ubuntu-latest
    needs: [test, sonar]
    permissions:
      packages: write
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven
    
    - name: Docker build & push
      run: mvn clean package -DskipTests jib:build -Djib.to.auth.username=${{ secrets.REGISTRY_USERNAME }} -Djib.to.auth.password=${{ secrets.REGISTRY_PASSWORD }} -Djib.to.tags=${{ github.run_number }}
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: k8s-manifests
        path: k8s/

  determine-environment:
    name: Determine environment
    if: ${{github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'releases/release')}}
    runs-on: ubuntu-latest
    steps:
      - name: Select environment
        id: select-env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/dev" ]; then
            echo "development"
            echo "env=dev" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "qa"
            echo "env=qa" >> "$GITHUB_OUTPUT"
          elif [ ${{ startsWith(github.ref, 'releases/release') }} ]; then
            echo "production"
            echo "env=prod" >> "$GITHUB_OUTPUT"
          fi
    outputs:
      env: ${{ steps.select-env.outputs.env }}

  deploy:
    name: Deploy to AKS
    if: ${{github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'releases/release')}}
    runs-on: ubuntu-latest
    needs: [ build, determine-environment ]
    environment: ${{ needs.determine-environment.outputs.env }}
    steps:
      - uses: actions/checkout@v3
      - name: Replace tokens
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '##'
          tokenSuffix: '##'
          files: '["k8s/*.yaml"]'
        env:
          TAG: ${{ github.run_number }}
          REGISTRY_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOMAIN: ${{ vars.DOMAIN }}
      - name: Azure login
        id: login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: '${{ secrets.resource_group }}'
          cluster-name: '${{ secrets.cluster_name }}'
      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3
      - name: Create ImagePullSecret
        uses: Azure/k8s-create-secret@v1.1
        with:
          container-registry-url: registry.hub.docker.com 
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: imagePullSecret
      - name: Deploy to AKS
        id: deploy-aks
        uses: Azure/k8s-deploy@v4
        with:
          namespace: '${{ needs.determine-environment.outputs.env }}'
          manifests: |
            k8s/deployment.yaml
            k8s/service.yaml
            k8s/ingress.yaml
          imagepullsecrets: |
            imagePullSecret